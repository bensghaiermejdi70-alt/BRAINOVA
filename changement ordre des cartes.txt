Je vais vous donner plusieurs m√©thodes pour changer l'ordre des cartes sur votre plateforme !

üéØ M√âTHODES POUR R√âORGANISER LES CARTES
1. SYST√àME DE TRI DYNAMIQUE
A. Interface utilisateur avec options de tri :

B. JavaScript pour le tri :<!-- Dans votre header -->
<div class="sorting-controls">
    <label>Trier par :</label>
    <select id="sortSelector" onchange="sortGames(this.value)">
        <option value="default">Ordre par d√©faut</option>
        <option value="alphabetical">Alphab√©tique</option>
        <option value="rating">Note (‚≠ê)</option>
        <option value="popularity">Popularit√© (üë•)</option>
        <option value="category">Cat√©gorie</option>
        <option value="recent">R√©cemment ajout√©s</option>
        <option value="custom">Ordre personnalis√©</option>
    </select>
    
    <button onclick="toggleSortDirection()" id="sortDirection">‚Üë</button>
</div>


// Configuration de l'ordre des jeux
window.GameOrder = {
    current: 'default',
    direction: 'asc',
    customOrder: [1, 5, 12, 3, 8, 15, 2, 9, 18, 7, 11, 20, 4, 6, 13, 16, 19, 22, 10, 14, 17, 21, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
    
    // Donn√©es des jeux pour le tri
    gameData: {
        1: { name: "Cyber Defense AI", rating: 4.8, popularity: 10400, category: "action", dateAdded: "2024-01-15" },
        2: { name: "Neural Poker", rating: 4.9, popularity: 8200, category: "reflexion", dateAdded: "2024-01-20" },
        3: { name: "Quantum Chess", rating: 4.7, popularity: 6500, category: "reflexion", dateAdded: "2024-01-25" },
        // ... donn√©es pour tous vos jeux
    }
};

function sortGames(sortType) {
    const grid = document.getElementById('gamesGrid');
    const cards = Array.from(grid.children);
    
    // Fonction de tri selon le type
    cards.sort((a, b) => {
        const gameIdA = parseInt(a.dataset.gameId);
        const gameIdB = parseInt(b.dataset.gameId);
        const gameA = window.GameOrder.gameData[gameIdA];
        const gameB = window.GameOrder.gameData[gameIdB];
        
        let comparison = 0;
        
        switch(sortType) {
            case 'alphabetical':
                comparison = gameA.name.localeCompare(gameB.name);
                break;
                
            case 'rating':
                comparison = gameB.rating - gameA.rating;
                break;
                
            case 'popularity':
                comparison = gameB.popularity - gameA.popularity;
                break;
                
            case 'category':
                comparison = gameA.category.localeCompare(gameB.category);
                break;
                
            case 'recent':
                comparison = new Date(gameB.dateAdded) - new Date(gameA.dateAdded);
                break;
                
            case 'custom':
                const indexA = window.GameOrder.customOrder.indexOf(gameIdA);
                const indexB = window.GameOrder.customOrder.indexOf(gameIdB);
                comparison = indexA - indexB;
                break;
                
            default: // 'default'
                comparison = gameIdA - gameIdB;
        }
        
        return window.GameOrder.direction === 'desc' ? -comparison : comparison;
    });
    
    // R√©organiser les cartes avec animation
    reorganizeCards(cards);
    window.GameOrder.current = sortType;
}

function reorganizeCards(sortedCards) {
    const grid = document.getElementById('gamesGrid');
    
    // Animation de sortie
    grid.style.opacity = '0.5';
    grid.style.transform = 'scale(0.98)';
    
    setTimeout(() => {
        // Vider et remplir avec le nouvel ordre
        grid.innerHTML = '';
        sortedCards.forEach(card => grid.appendChild(card));
        
        // Animation d'entr√©e
        grid.style.opacity = '1';
        grid.style.transform = 'scale(1)';
    }, 200);
}

function toggleSortDirection() {
    window.GameOrder.direction = window.GameOrder.direction === 'asc' ? 'desc' : 'asc';
    document.getElementById('sortDirection').textContent = window.GameOrder.direction === 'asc' ? '‚Üë' : '‚Üì';
    
    // Re-trier avec la nouvelle direction
    sortGames(window.GameOrder.current);
}

2. SYST√àME DE DRAG & DROP
// Activer le drag & drop pour r√©organiser manuellement
function enableDragAndDrop() {
    const cards = document.querySelectorAll('.game-card');
    
    cards.forEach(card => {
        card.draggable = true;
        card.addEventListener('dragstart', handleDragStart);
        card.addEventListener('dragover', handleDragOver);
        card.addEventListener('drop', handleDrop);
        card.addEventListener('dragend', handleDragEnd);
    });
}

let draggedCard = null;

function handleDragStart(e) {
    draggedCard = this;
    this.style.opacity = '0.5';
    e.dataTransfer.effectAllowed = 'move';
}

function handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    this.style.borderTop = '3px solid #667eea';
}

function handleDrop(e) {
    e.preventDefault();
    
    if (draggedCard !== this) {
        const grid = document.getElementById('gamesGrid');
        const allCards = Array.from(grid.children);
        const draggedIndex = allCards.indexOf(draggedCard);
        const targetIndex = allCards.indexOf(this);
        
        if (draggedIndex < targetIndex) {
            grid.insertBefore(draggedCard, this.nextSibling);
        } else {
            grid.insertBefore(draggedCard, this);
        }
        
        // Sauvegarder le nouvel ordre
        saveCustomOrder();
    }
    
    this.style.borderTop = '';
}

function handleDragEnd(e) {
    this.style.opacity = '1';
    
    // Nettoyer les indicateurs visuels
    document.querySelectorAll('.game-card').forEach(card => {
        card.style.borderTop = '';
    });
}

function saveCustomOrder() {
    const cards = document.querySelectorAll('.game-card');
    const newOrder = Array.from(cards).map(card => parseInt(card.dataset.gameId));
    
    // Sauvegarder dans localStorage
    localStorage.setItem('customGameOrder', JSON.stringify(newOrder));
    window.GameOrder.customOrder = newOrder;
}

3. FILTRES ET CAT√âGORIES
// Syst√®me de filtrage par cat√©gories
function setupCategoryFilters() {
    const categories = ['tous', 'action', 'reflexion', 'puzzle', 'strategie', 'arcade'];
    const filterContainer = document.createElement('div');
    filterContainer.className = 'category-filters';
    
    categories.forEach(category => {
        const button = document.createElement('button');
        button.textContent = category.charAt(0).toUpperCase() + category.slice(1);
        button.className = 'filter-btn';
        button.onclick = () => filterByCategory(category);
        filterContainer.appendChild(button);
    });
    
    document.getElementById('header').appendChild(filterContainer);
}

function filterByCategory(category) {
    const cards = document.querySelectorAll('.game-card');
    
    cards.forEach(card => {
        const gameId = parseInt(card.dataset.gameId);
        const gameCategory = window.GameOrder.gameData[gameId]?.category;
        
        if (category === 'tous' || gameCategory === category) {
            card.style.display = 'block';
            card.style.animation = 'fadeIn 0.3s ease';
        } else {
            card.style.display = 'none';
        }
    });
    
    // Mettre √† jour les boutons actifs
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
}

4. ORDRE PERSONNALIS√â AVANC√â
// Interface pour d√©finir un ordre personnalis√©
function openCustomOrderModal() {
    const modal = document.createElement('div');
    modal.className = 'custom-order-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <h3>Personnaliser l'ordre des jeux</h3>
            <div class="sortable-list" id="sortableList"></div>
            <div class="modal-actions">
                <button onclick="saveCustomOrder()">Sauvegarder</button>
                <button onclick="closeModal()">Annuler</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    populateSortableList();
}

function populateSortableList() {
    const list = document.getElementById('sortableList');
    const currentOrder = window.GameOrder.customOrder;
    
    currentOrder.forEach(gameId => {
        const item = document.createElement('div');
        item.className = 'sortable-item';
        item.dataset.gameId = gameId;
        item.innerHTML = `
            <span class="drag-handle">‚ãÆ‚ãÆ</span>
            <span class="game-info">
                ${gameId}. ${window.GameOrder.gameData[gameId]?.name || 'Jeu ' + gameId}
            </span>
        `;
        list.appendChild(item);
    });
    
    // Activer le tri dans la liste
    enableListSorting();
}

5. SAUVEGARDE ET RESTAURATION
// Sauvegarder les pr√©f√©rences utilisateur
function saveUserPreferences() {
    const preferences = {
        sortType: window.GameOrder.current,
        sortDirection: window.GameOrder.direction,
        customOrder: window.GameOrder.customOrder,
        favoriteGames: getFavoriteGames(),
        hiddenCategories: getHiddenCategories()
    };
    
    localStorage.setItem('gamePreferences', JSON.stringify(preferences));
}

// Restaurer les pr√©f√©rences au chargement
function loadUserPreferences() {
    const saved = localStorage.getItem('gamePreferences');
    if (saved) {
        const preferences = JSON.parse(saved);
        
        window.GameOrder.current = preferences.sortType || 'default';
        window.GameOrder.direction = preferences.sortDirection || 'asc';
        window.GameOrder.customOrder = preferences.customOrder || window.GameOrder.customOrder;
        
        // Appliquer l'ordre sauvegard√©
        sortGames(window.GameOrder.current);
    }
}

// Initialiser au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    loadUserPreferences();
    setupCategoryFilters();
    enableDragAndDrop();
});

6. CSS POUR LES ANIMATIONS
.game-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.game-card:hover {
    transform: translateY(-4px);
}

.sorting-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
}

.filter-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #667eea;
    background: transparent;
    color: #667eea;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.filter-btn.active,
.filter-btn:hover {
    background: #667eea;
    color: white;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

üéØ UTILISATION
Tri automatique : sortGames('rating')
Ordre personnalis√© : Drag & drop activ√©
Filtrage : filterByCategory('action')
Sauvegarde : Automatique dans localStorage
Cette solution vous donne un contr√¥le total sur l'organisation de vos 36 jeux ! üöÄ