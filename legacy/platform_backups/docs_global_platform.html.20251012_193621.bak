<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Brainova - Plateforme unique (global)</title>
  <style>
    /* Inline minimal maquette CSS (self-contained) */
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Rajdhani:wght@300;400;700&display=swap');
    *{box-sizing:border-box}
    body{margin:0;font-family:Rajdhani,Segoe UI,Arial;background:linear-gradient(135deg,#0a0a0a 0%,#1a1a2e 50%,#16213e 100%);color:#fff}
    .header{background:linear-gradient(135deg,rgba(0,0,0,0.95),rgba(26,26,46,0.9));backdrop-filter:blur(10px);border-bottom:2px solid #00d4ff;padding:14px 18px;display:flex;justify-content:space-between;align-items:center;position:sticky;top:0;z-index:1000}
    .logo h1{font-family:Orbitron,monospace;font-size:1.6rem;margin:0;background:linear-gradient(45deg,#00d4ff,#ff0096,#00ff88);-webkit-background-clip:text;background-clip:text;-webkit-text-fill-color:transparent}
    .nav-btn{background:linear-gradient(45deg,#00d4ff,#ff0096);border:none;border-radius:20px;padding:8px 14px;color:#fff;font-weight:700;cursor:pointer}
    .main{max-width:1200px;margin:18px auto;padding:0 18px}
    .hero{padding:28px;background:linear-gradient(135deg,rgba(0,212,255,0.05),rgba(255,0,150,0.03));border-radius:12px;margin-bottom:18px}
    .hero h2{font-family:Orbitron,monospace;font-size:2rem;margin:0;color:#00d4ff}
    .games-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:18px;margin-top:18px}
    .game-card{background:linear-gradient(135deg,rgba(0,0,0,0.9),rgba(26,26,46,0.8));border:2px solid #00d4ff;padding:14px;border-radius:14px;cursor:pointer;transition:transform .18s,box-shadow .18s}
    .game-card:hover{transform:translateY(-6px);box-shadow:0 12px 30px rgba(0,212,255,0.12)}
    .game-number{font-weight:700;color:#00d4ff}
    .game-icon{font-size:40px;text-align:center;margin:8px 0}
    .game-card h3{font-family:Orbitron,monospace;margin:6px 0;color:#fff;text-align:center}
    /* per-card customizations removed to restore default platform styling */
  .overlay{position:fixed;inset:0;display:none;align-items:center;justify-content:center;background:rgba(0,0,0,0.92);z-index:2000}
  .overlay.active{display:flex}
  /* Make the iframe frame full-viewport so games render large */
  .overlay .frame{position:fixed;inset:0;background:#000;border-radius:0;overflow:hidden;display:flex;align-items:stretch;justify-content:stretch}
  .overlay .frame iframe{width:100vw;height:100vh;border:0}
    .close-btn{position:absolute;top:8px;right:8px;background:linear-gradient(45deg,#ff0096,#00d4ff);border:none;color:#fff;padding:8px 10px;border-radius:8px;font-weight:700;cursor:pointer;z-index:10}
    .overlay-title{position:absolute;left:12px;top:10px;color:#fff;font-weight:700;z-index:10}
    .loader{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:linear-gradient(135deg,#0b1220,#11223a);z-index:9999}
    .spinner{width:48px;height:48px;border:4px solid rgba(255,255,255,0.12);border-top-color:#00d4ff;border-radius:50%;animation:spin 1s linear infinite}
    @keyframes spin{to{transform:rotate(360deg)}}
  @media (max-width:480px){.overlay .frame{position:fixed;inset:0;border-radius:0}}
  /* Futuristic language picker styles */
  #langPicker { font-family: Rajdhani, Arial, sans-serif; }
  #langBtn { display:flex;align-items:center;gap:8px;background:linear-gradient(135deg,#061229 0%,#08223a 100%);border:1px solid rgba(0,212,255,0.12);padding:8px 12px;border-radius:14px;color:#cfefff;backdrop-filter:blur(6px);box-shadow:0 6px 24px rgba(0,212,255,0.06); }
  #langBtn:focus{outline:2px solid rgba(0,212,255,0.18)}
  #langMenu .lang-item{transition:transform .12s,background .12s;color:#e6f7ff}
  #langMenu .lang-item:hover{transform:translateX(6px);background:linear-gradient(90deg,rgba(0,212,255,0.04),rgba(255,0,150,0.02));}
  #langMenu .lang-item.selected{background:linear-gradient(90deg,rgba(0,212,255,0.12),rgba(255,0,150,0.04));box-shadow:0 6px 18px rgba(0,212,255,0.06);}
  /* Category button color schemes */
  #catalog-hero .cat[data-filter="memoire"]{ background: linear-gradient(135deg,#7ee8fa 0%,#eec0c6 100%); color:#001 }
  #catalog-hero .cat[data-filter="memoire"]:hover{ box-shadow:0 8px 28px rgba(126,232,250,0.18); transform:translateY(-3px) }
  #catalog-hero .cat[data-filter="societe"]{ background: linear-gradient(135deg,#cfd9df 0%,#e2ebf0 100%); color:#001 }
  #catalog-hero .cat[data-filter="societe"]:hover{ box-shadow:0 8px 28px rgba(200,217,223,0.12); transform:translateY(-3px) }
  #catalog-hero .cat[data-filter="puzzle"]{ background: linear-gradient(135deg,#ffd6a5 0%,#fdffb6 100%); color:#111 }
  #catalog-hero .cat[data-filter="puzzle"]:hover{ box-shadow:0 8px 28px rgba(255,214,165,0.14); transform:translateY(-3px) }
  #catalog-hero .cat[data-filter="arcade"]{ background: linear-gradient(135deg,#a18cd1 0%,#fbc2eb 100%); color:#0b002b }
  #catalog-hero .cat[data-filter="arcade"]:hover{ box-shadow:0 8px 28px rgba(161,140,209,0.14); transform:translateY(-3px) }
  #catalog-hero .cat[data-filter="strategie"]{ background: linear-gradient(135deg,#89f7fe 0%,#66a6ff 100%); color:#001 }
  #catalog-hero .cat[data-filter="strategie"]:hover{ box-shadow:0 8px 28px rgba(102,166,255,0.14); transform:translateY(-3px) }
  #catalog-hero .cat[data-filter="quiz"]{ background: linear-gradient(135deg,#fbc2eb 0%,#a6c1ee 100%); color:#001 }
  #catalog-hero .cat[data-filter="quiz"]:hover{ box-shadow:0 8px 28px rgba(191,194,238,0.14); transform:translateY(-3px) }
  #catalog-hero .cat[data-filter="reflexe"]{ background: linear-gradient(135deg,#ff9a9e 0%,#fecfef 100%); color:#001 }
  #catalog-hero .cat[data-filter="reflexe"]:hover{ box-shadow:0 8px 28px rgba(255,154,158,0.14); transform:translateY(-3px) }
  </style>
</head>
<body>
  <div class="loader" id="loader"><div class="spinner" aria-hidden></div></div>
  <header class="header" id="header" style="display:none">
    <div class="logo"><h1>üß† BRAINOVA</h1></div>
    <nav class="nav" style="display:flex;gap:8px;align-items:center">
  <button class="nav-btn" onclick="location.href='global_platform.html'">Accueil</button>
      <button id="btnLogin" class="nav-btn">Connexion</button>
      <button id="btnSignup" class="nav-btn">Inscription</button>
      <a class="nav-btn" href="https://buy.stripe.com/cNi8wR7IC77o54icy49EI01" target="_blank" rel="noopener noreferrer" style="background:linear-gradient(45deg,#ffd700,#ff7a00);">Pass Premium</a>
      <div id="userSigle" style="width:36px;height:36px;border-radius:50%;background:linear-gradient(135deg,#00d4ff,#ff0096);display:flex;align-items:center;justify-content:center;color:#001;font-weight:800;margin-left:8px;display:none">JD</div>
      <div style="position:relative;margin-left:8px">
        <button id="settingsBtn" class="nav-btn" style="padding:6px 8px">‚öôÔ∏è</button>
        <div id="settingsMenu" style="position:absolute;right:0;top:40px;background:#0b1220;border:1px solid rgba(255,255,255,0.04);padding:6px;border-radius:8px;display:none;min-width:160px">
          <div style="padding:8px;color:#cfefff;cursor:pointer" id="settingsEditProfile">Changer profil</div>
          <div style="padding:8px;color:#cfefff;cursor:pointer" id="settingsHistory">Historique</div>
        </div>
      </div>
      <!-- Futuristic language selector (single select) -->
      <div id="langPicker" style="position:relative;margin-left:8px">
        <select id="langSelect" aria-label="Langue" title="Langue" style="appearance:none;-webkit-appearance:none;-moz-appearance:none;display:flex;align-items:center;gap:8px;padding:8px 12px;border-radius:14px;border:1px solid rgba(0,212,255,0.12);background:linear-gradient(135deg,#061229 0%,#08223a 100%);color:#cfefff;cursor:pointer;font-weight:700">
          <option value="fr">üá´üá∑ Fran√ßais</option>
          <!doctype html>
          <html lang="fr">
            <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width,initial-scale=1">
              <title>Redirecting to canonical platform</title>
              <meta http-equiv="refresh" content="0;url=../global_platform_canonical.html">
              <script>location.replace('../global_platform_canonical.html');</script>
            </head>
            <body>
              Redirecting to the canonical platform ‚Äî <a href="../global_platform_canonical.html">open platform</a>
            </body>
          </html>
        try{
          if(Number(i) === 0){
            const accent = 'background:linear-gradient(180deg,#cceff7,#33c9ff);border-color:#33c9ff;color:#001;box-shadow:0 10px 30px rgba(51,201,255,0.22);border-radius:10px;';
            div.style.cssText += accent;
          }
        }catch(e){/* ignore */}

        div.innerHTML = `
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div class="game-number>${String(i).padStart(2,'0')}</div>
            <div class="game-status">--</div>
          </div>
          <div class="game-icon">${meta.icon || 'üéÆ'}</div>
          <h3>${meta.title}</h3>
          <p style="text-align:center;color:#cfefff">${meta.desc || 'Cliquez pour ouvrir'}</p>
        `;
        // If this is the Test QI card (id 0) force black text for better contrast
        try{
          if(Number(i) === 0){
            div.style.color = '#000';
            const p = div.querySelector('p'); if(p) p.style.color = '#000';
          }
        }catch(e){ /* ignore */ }
        div.addEventListener('click', ()=>openGame(i));
        return div;
      }

      // Re-render the entire grid (used when language changes)
      function renderGrid(){
        grid.innerHTML = '';
        // include 0..total so Test QI (id 0) appears before the other games
        for(let i=0;i<=total;i++) grid.appendChild(makeCard(i));
      }

      // initial render (0..total)
      for(let i=0;i<=total;i++) grid.appendChild(makeCard(i));

  // Default: enable no-server only when opened via file://; when served over HTTP use iframe overlay by default
  let noServerMode = (location.protocol === 'file:');
      const noServerBtn = document.getElementById('noServerBtn');
      function updateNoServerUI(){
        noServerBtn.style.background = noServerMode ? 'linear-gradient(45deg,#ffd700,#00ff88)' : '';
        noServerBtn.textContent = noServerMode ? 'Mode sans serveur (ON)' : 'Mode sans serveur';
      }
  updateNoServerUI();
  // If we are running via file://, keep no-server; if we are running via http and user wants iframe, they can toggle off
      noServerBtn.addEventListener('click', ()=>{ noServerMode = !noServerMode; updateNoServerUI(); });

      function openGame(id){
        const meta = gameMap[id] || {};
        // resolve filename: prefer explicit file, else fallbacks
        const candidates = [];
        if(meta.file) candidates.push(meta.file);
        candidates.push(`./jeux${id}.html`);
        candidates.push(`./jeux${id}.html.html`);
        const chosen = (cardFileExists => cardFileExists)();
        // If no-server or file protocol, open in new tab using first candidate
        const finalFile = meta.file || `./jeux${id}.html`;
        if(noServerMode){
          window.open(finalFile,'_blank');
          return;
        }
        // When running via server, try to load the first candidate that responds
        titleEl.textContent = meta.title || `Jeu ${id}`;
        // Try to set iframe src to meta.file first
          // Resolve relative URL to absolute for clearer logs
          let resolvedUrl = meta.file || `./jeux${id}.html`;
          try{
            resolvedUrl = new URL(resolvedUrl, window.location.href).href;
            console.debug(`global_platform.openGame id=${id} resolved='${resolvedUrl}'`);
          }catch(err){
            console.debug(`global_platform.openGame id=${id} raw='${resolvedUrl}'`);
          }

          // For robustness encode the resolved URL (filenames may contain spaces) and
          // attempt to load via iframe.src. If navigation fails, fetch and set srcdoc as fallback.
          try{
            const safeUrl = encodeURI(resolvedUrl);
            console.debug(`global_platform.openGame id=${id} attempting iframe.src -> ${safeUrl}`);
            // Try setting src first
            iframe.src = safeUrl;
            // Also attempt a quick HEAD to detect 404 and fallback if necessary
            fetch(safeUrl, { method: 'HEAD' }).then(r=>{
              if(!r.ok){
                // fallback: fetch html and set srcdoc with <base>
                return fetch(safeUrl).then(r2=>{ if(!r2.ok) throw new Error('HTTP '+r2.status); return r2.text(); }).then(html=>{
                  const base = `<base href="${safeUrl}">`;
                  iframe.srcdoc = base + html;
                  console.debug(`global_platform.openGame id=${id} srcdoc fallback set`);
                });
              }
            }).catch(err=>{
              console.warn('Setting iframe.src or HEAD check failed, trying fetch+srcdoc fallback', err);
              fetch(safeUrl).then(r=>{ if(!r.ok) throw new Error('HTTP '+r.status); return r.text(); }).then(html=>{
                const base = `<base href="${safeUrl}">`;
                iframe.srcdoc = base + html;
                console.debug(`global_platform.openGame id=${id} srcdoc fallback set`);
              }).catch(err2=>{
                console.error('Failed to fetch game HTML for overlay', safeUrl, err2);
                showOverlayError('Impossible de charger le jeu dans l‚Äôoverlay. Ouvrir dans un nouvel onglet.');
              });
            });
          }catch(e){
            console.warn('Error resolving safe URL for iframe', e);
            try{ iframe.src = resolvedUrl; }catch(_){ }
          }
        // If opening game 1 (custom page with its own exit UI), hide the platform close button
        try{ if(Number(id) === 1){ closeBtn.style.display = 'none'; } else { closeBtn.style.display = ''; } }catch(e){}
        overlay.classList.add('active');
        document.addEventListener('keydown', escClose);
      }

      // Open authentication page (mode = 'login' or 'signup') in overlay
      async function openAuth(mode){
  const target = './connexion-et-profil.html' + (mode ? `?mode=${encodeURIComponent(mode)}` : '');
        if(noServerMode){ window.open(target, '_blank'); return; }
        titleEl.textContent = (mode === 'signup') ? 'Inscription' : 'Connexion';
        // quick HEAD check to ensure reachable
        try{
          const r = await fetch(target, { method: 'HEAD' });
          if(!r.ok) throw new Error('HTTP '+r.status);
          // reachable -> set iframe.src (percent-encode to handle spaces)
          try{
            const tgt = new URL(target, window.location.href).href;
            iframe.src = encodeURI(tgt);
          }catch(e){ try{ iframe.src = target; }catch(_){} }
          overlay.classList.add('active');
          document.addEventListener('keydown', escClose);
          return;
        }catch(err){
          console.warn('Auth target unreachable in overlay, opening new tab', err);
          // fallback to new tab
          window.open(target, '_blank');
          return;
        }
      }

      function closeGame(){
        overlay.classList.remove('active');
        try{ iframe.src = 'about:blank'; }catch(e){}
        try{ closeBtn.style.display = ''; }catch(e){}
        document.removeEventListener('keydown', escClose);
      }

      function showOverlayError(msg){
        try{
          // show a simple HTML error message in the iframe so user sees why it failed
          const errHtml = `<div style="display:flex;flex-direction:column;align-items:center;justify-content:center;height:100%;color:#fff;background:#111;padding:20px;font-family:Rajdhani,Segoe UI,Arial">
            <h2>Erreur de chargement</h2>
            <p style="max-width:800px;text-align:center">${String(msg)}</p>
            <p style="margin-top:12px"><button onclick="window.parent.postMessage({action:'close'},'*')" style="padding:8px 12px;border-radius:6px;border:0;cursor:pointer;background:#00d4ff;color:#000;font-weight:700">Fermer</button></p>
          </div>`;
          iframe.srcdoc = errHtml;
        }catch(e){/* ignore */}
      }

      function escClose(e){ if(e.key==="Escape") closeGame(); }

      closeBtn.addEventListener('click', closeGame);
      overlay.addEventListener('click', (e)=>{ if(e.target===overlay) closeGame(); });

      // Iframe load / error logging to help diagnose blank frames
      iframe.addEventListener('load', ()=>{
        try{ console.debug('overlay iframe loaded', iframe.src); }catch(e){}
      });
      iframe.addEventListener('error', (ev)=>{
        try{ console.error('overlay iframe error loading', iframe.src, ev); }catch(e){}
      });

      // show header after load
      window.addEventListener('load', ()=>{
        document.getElementById('loader').style.display='none';
        document.getElementById('header').style.display='flex';
        // wire auth buttons
        const b1 = document.getElementById('btnLogin'); if(b1) b1.addEventListener('click', ()=>openAuth('login'));
        const b2 = document.getElementById('btnSignup'); if(b2) b2.addEventListener('click', ()=>openAuth('signup'));
  // show saved sigle if user already logged in
        try{
          const saved = localStorage.getItem('brainovaUser');
          if(saved){
            const u = JSON.parse(saved);
            const sig = (u.avatar && u.avatar.length>0) ? u.avatar : (u.name?u.name.split(' ').map(n=>n.charAt(0)).join('').toUpperCase():'');
            const sigEl = document.getElementById('userSigle');
            if(sigEl && sig){ sigEl.textContent = sig; sigEl.style.display='flex'; }
          }
        }catch(e){/* ignore */}
        // initialize single language select
        const langSelect = document.getElementById('langSelect');
        const LangMeta = { fr:{emoji:'üá´üá∑', label:'FR'}, en:{emoji:'üá¨üáß', label:'EN'}, ar:{emoji:'üá∏üá¶', label:'AR'}, es:{emoji:'üá™üá∏', label:'ES'}, de:{emoji:'üá©üá™', label:'DE'}, zh:{emoji:'üá®üá≥', label:'‰∏≠Êñá'} };

        function updateLangPickerUI(lang){
          try{
            if(langSelect) {
              langSelect.value = lang;
              // update visible label is already handled by the select's option text
            }
          }catch(e){/* ignore */}
        }

        // handle selection
        if(langSelect){
          langSelect.addEventListener('change', function(){ selectLang(this.value); });
        }

        function selectLang(L){ if(!L) return; applyLanguage(L); updateLangPickerUI(L); localStorage.setItem('brainovaLang', L); 
          // notify children frames (so embedded games update immediately)
          try{ window.frames && Array.from(document.getElementsByTagName('iframe')).forEach(f=>{ try{ f.contentWindow.postMessage({ action:'set-language', lang: L }, '*'); }catch(e){} }); }catch(e){}
        }
  // set initial label and apply language
  updateLangPickerUI(currentLang);
  applyLanguage(currentLang);
        // settings menu
        const sBtn = document.getElementById('settingsBtn'); const sMenu = document.getElementById('settingsMenu');
        if(sBtn && sMenu){ sBtn.addEventListener('click', ()=>{ sMenu.style.display = (sMenu.style.display === 'block') ? 'none' : 'block'; }); }
        document.getElementById('settingsEditProfile').addEventListener('click', ()=>{ sMenu.style.display='none'; openAuth('profile'); });
        document.getElementById('settingsHistory').addEventListener('click', ()=>{ sMenu.style.display='none'; openAuth('history'); });
      });

      // Listen to messages from iframes so games can ask the platform to close the overlay
      window.addEventListener('message', (e)=>{
        try{
          const data = e.data || {};
          if(data && data.action === 'close'){
            closeGame();
          }
          if(data && data.action === 'login-success'){
            console.debug('Received login-success from iframe', data.user);
            // Close overlay then reload or navigate to homepage
            closeGame();
            try{
              // If the platform is a single page, you might refresh to reflect login state
              // update header sigle from user info then reload
              try{
                const u = data.user || {};
                const sig = (u.avatar && u.avatar.length>0) ? u.avatar : (u.name?u.name.split(' ').map(n=>n.charAt(0)).join('').toUpperCase():'');
                const sigEl = document.getElementById('userSigle');
                if(sigEl && sig){ sigEl.textContent = sig; sigEl.style.display='flex'; }
              }catch(e){}
              window.location.href = window.location.pathname; // reload the current page (global_platform.html)
            }catch(err){
              window.location.reload();
            }
          }
          // Message from embedded game asking to return to platform home
          if(data && data.action === 'go-home'){
            console.debug('Received go-home from iframe');
            try{ closeGame(); window.location.href = window.location.pathname; }catch(err){ window.location.reload(); }
          }
        }catch(err){/* ignore */}
      });

      // Tester tous les jeux : v√©rifie chaque jeuxN.html et met √† jour le statut
      const checkBtn = document.getElementById('checkAllBtn');
      const checkStatus = document.getElementById('checkStatus');
      checkBtn.addEventListener('click', async ()=>{
        checkBtn.disabled = true; checkStatus.textContent = 'Test en cours...';
        let ok = 0, fail = 0;
        for(let i=0;i<=total;i++){
          const meta = gameMap[i] || {};
          const candidates = [];
          if(meta.file) candidates.push(meta.file);
          candidates.push(`./jeux${i}.html`);
          candidates.push(`./jeux${i}.html.html`);
          const card = grid.querySelector(`.game-card[data-game-id="${i}"]`);
          const statusEl = card.querySelector('.game-status');
          let found = false;
          for(const url of candidates){
            if(!url) continue;
            try{
              const r = await fetch(url, {method:'HEAD'});
              if(r.ok){ statusEl.textContent = 'OK'; statusEl.style.background = 'linear-gradient(45deg,#00ff88,#ffd700)'; statusEl.style.color = '#000'; ok++; found = true; break; }
            }catch(e){ /* try next */ }
          }
          if(!found){ statusEl.textContent = 'N/D'; statusEl.style.background = 'rgba(255,0,0,0.12)'; fail++; }
        }
        checkStatus.textContent = `R√©sultat : ${ok} OK / ${fail} FAIL`;
        checkBtn.disabled = false;
      });

    })();
  </script>
  <script>
    // Wire category buttons to filter the games grid by meta.tags
    (function(){
      const hero = document.getElementById('catalog-hero');
      if(!hero) return;
      const buttons = hero.querySelectorAll('.cat');
      const grid = document.getElementById('gamesGrid');
      if(!buttons.length || !grid) return;
      buttons.forEach(b=>{
        b.addEventListener('click', ()=>{
          const filter = (b.dataset.filter||'').toString().toLowerCase();
          const cards = grid.querySelectorAll('.game-card');
          cards.forEach(c=>{
            const id = Number(c.dataset.gameId);
            const meta = (window.gameMap && window.gameMap[id]) ? window.gameMap[id] : null;
            const tags = (meta && meta.tags) ? meta.tags.map(t=>t.toString().toLowerCase()) : [];
            if(!filter || tags.includes(filter)) c.style.display='block'; else c.style.display='none';
          });
        });
      });
    })();
  </script>
</body>
</html>
<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
